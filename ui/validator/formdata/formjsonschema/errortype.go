package formjsonschema

type ErrorType string

const ErrorTypeFalse = ErrorType("false")
const ErrorTypeRequired = ErrorType("required")
const ErrorTypeInvalidType = ErrorType("invalid_type")
const ErrorTypeNumberAnyOf = ErrorType("number_any_of")
const ErrorTypeNumberOneOf = ErrorType("number_one_of")
const ErrorTypeNumberAllOf = ErrorType("number_all_of")
const ErrorTypeNumberNot = ErrorType("number_not")
const ErrorTypeMissing_dependency = ErrorType("missing_dependency")
const ErrorTypeInternal = ErrorType("internal")
const ErrorTypeConst = ErrorType("const")
const ErrorTypeEnum = ErrorType("enum")
const ErrorTypeArrayNoAdditionalItems = ErrorType("array_no_additional_items")
const ErrorTypeArrayMinItems = ErrorType("array_min_items")
const ErrorTypeArrayMaxItems = ErrorType("array_max_items")
const ErrorTypeUnique = ErrorType("unique")
const ErrorTypeContains = ErrorType("contains")
const ErrorTypeArrayMinProperties = ErrorType("array_min_properties")
const ErrorTypeArrayMaxProperties = ErrorType("array_max_properties")
const ErrorTypeAdditionalPropertyNotAllowed = ErrorType("additional_property_not_allowed")
const ErrorTypeInvalidPropertyPattern = ErrorType("invalid_property_pattern")
const ErrorTypeInvalidPropertyName = ErrorType("invalid_property_name")
const ErrorTypeStringGte = ErrorType("string_gte")
const ErrorTypeStringLte = ErrorType("string_lte")
const ErrorTypePattern = ErrorType("pattern")
const ErrorTypeFormat = ErrorType("format")
const ErrorTypeMultipleOf = ErrorType("multiple_of")
const ErrorTypeNumberGte = ErrorType("number_gte")
const ErrorTypeNumberGt = ErrorType("number_gt")
const ErrorTypeNumberLte = ErrorType("number_lte")
const ErrorTypeNumberLt = ErrorType("number_lt")
const ErrorTypeConditionThen = ErrorType("condition_then")
const ErrorTypeConditionElse = ErrorType("condition_else")

var MessageFalse = "False always fails validation"
var MessageRequired = "{{.property}} is required"
var MessageInvalidType = "Invalid type. Expected: {{.expected}}, given: {{.given}}"
var MessageNumberAnyOf = "Must validate at least one schema (anyOf)"
var MessageNumberOneOf = "Must validate one and only one schema (oneOf)"
var MessageNumberAllOf = "Must validate all the schemas (allOf)"
var MessageNumberNot = "Must not validate the schema (not)"
var MessageMissingDependency = "Has a dependency on {{.dependency}}"
var MessageInternal = "Internal Error {{.error}}"
var MessageConst = "{{.field}} does not match: {{.allowed}}"
var MessageEnum = "{{.field}} must be one of the following: {{.allowed}}"
var MessageArrayNoAdditionalItems = "No additional items allowed on array"
var MessageArrayNotEnoughItems = "Array must have at least {{.min}} items"
var MessageArrayMaxItems = "Array must have at most {{.max}} items"
var MessageUnique = "{{.type}} items[{{.i}},{{.j}}] must be unique"
var MessageArrayContains = "At least one of the items must match"
var MessageArrayMinProperties = "Must have at least {{.min}} properties"
var MessageArrayMaxProperties = "Must have at most {{.max}} properties"
var MessageAdditionalPropertyNotAllowed = "Additional property {{.property}} is not allowed"
var MessageInvalidPropertyPattern = `Property "{{.property}}" does not match pattern {{.pattern}}`
var MessageInvalidPropertyName = `Property name of "{{.property}}" does not match`
var MessageStringGTE = "String length must be greater than or equal to {{.min}}"
var MessageStringLTE = "String length must be less than or equal to {{.max}}"
var MessageDoesNotMatchPattern = `Does not match pattern '{{.pattern}}'`
var MessageDoesNotMatchFormat = `Does not match format '{{.format}}'`
var MessageMultipleOf = `Must be a multiple of {{.multiple}}`
var MessageNumberGTE = "Must be greater than {{.min}}"
var MessageNumberLTE = "Must be less than or equal to {{.max}}"
var MessageNumberLT = `Must be less than {{.max}}`
var MessageRegexPattern = `Invalid regex pattern '{{.pattern}}'`
var MessageGreaterThanZero = `{{.number}} must be strictly greater than 0`
var MessageMustBeOfA = `{{.x}} must be of an {{.y}}`
var MessageMustBeOfAn = `{{.x}} must be of an {{.y}}`
var MessageCannotBeUsedWithout = `{{.x}} cannot be used without {{.y}}`
var MessageCannotBeGT = `{{.x}} cannot be greater than {{.y}}`
var MessageMustBeOfType = `{{.key}} must be of type {{.type}}`
var MessageMustBeValidRegex = `{{.key}} must be a valid regex`
var MessageMustBeValidFormat = `{{.key}} must be a valid format {{.given}}`
var MessageMustBeGTEZero = `{{.key}} must be greater than or equal to 0`
var MessageKeyCannotBeGreaterThan = `{{.key}} cannot be greater than {{.y}}`
var MessageKeyItemsMustBeOfType = `{{.key}} items must be {{.type}}`
var MessageKeyItemsMustBeUnique = `{{.key}} items must be unique`
var MessageReferenceMustBeCanonical = `Reference {{.reference}} must be canonical`
var MessageNotAValidType = `has a primitive type that is NOT VALID -- given: {{.given}} Expected valid values are:{{.expected}}`
var MessageDuplicated = `{{.type}} type is duplicated`
var MessageHttpBadStatus = `Could not read schema from HTTP, response status is {{.status}}`
var MessageErrorFormat = `{{.field}}: {{.description}}`
var MessageParseError = `Expected: {{.expected}}, given: Invalid JSON`
var MessageConditionThen = `Must validate "then" as "if" was valid`
var MessageConditionElse = `Must validate "else" as "if" was not valid`
